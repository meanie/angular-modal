{"version":3,"sources":["modal.service.js","meanie-angular-modal.min.js"],"names":["window","angular","undefined","module","factory","stack","get","isEmpty","length","add","modalInstance","push","remove","index","indexOf","splice","$animate","$document","$appendAnimated","overlayElement","bodyElement","find","eq","show","overlayClass","element","attr","class","hide","leave","child","parent","children","enter","provider","this","defaults","closeOnEsc","closeOnClick","template","templateUrl","scope","controller","controllerAs","resolve","locals","appendTo","overlay","wrapperClass","configs","setDefaults","extend","modal","name","config","forEach","$get","$rootScope","$q","$templateRequest","$injector","$controller","$compile","$modalStack","$modalOverlay","getTemplatePromise","when","getResolvePromises","resolves","promises","item","isFunction","isArray","invoke","isString","openModal","$$modal","html","content","on","event","target","currentTarget","preventDefault","stopPropagation","$apply","closeModal","showOverlay","then","openedDeferred","reason","reject","result","wasDismissed","resultDeferred","$destroy","removeEventListener","Modal","open","options","Error","defer","opened","promise","close","dismiss","key","keyCode","which","addEventListener","all","concat","shift","$new","$close","$dismiss","$scope","$modalInstance","value","closeAll"],"mappings":"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","file":"meanie-angular-modal.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Base z-index\n  // var BASE_Z_INDEX = 10000;\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n      return stack.length - 1;\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay'\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        }\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listener\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            options + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick\n        };\n\n        //Create modal instance\n        var modalInstance = {\n          $$modal: modal,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve))).then(function(resolves) {\n\n          //Get template content\n          modal.content = resolves.shift();\n\n          //Determine modal scope and link close/dismiss handlers\n          modal.scope = (options.scope || $rootScope).$new();\n          modal.scope.$close = modalInstance.close;\n          modal.scope.$dismiss = modalInstance.dismiss;\n\n          //Controller given?\n          if (options.controller) {\n\n            //Initialize controller vars\n            var locals = {};\n\n            //Provide scope and modal instance\n            locals.$scope = modal.scope;\n            locals.$modalInstance = modalInstance;\n\n            //Provide other passed locals\n            if (options.locals && typeof options.locals === 'object') {\n              angular.forEach(options.locals, function(value, key) {\n                locals[key] = value;\n              });\n            }\n\n            //Provide resolved values\n            angular.forEach(options.resolve, function(value, key) {\n              locals[key] = resolves.shift();\n            });\n\n            //Create controller instance\n            modal.controller = $controller(options.controller, locals);\n            if (options.controllerAs) {\n              modal.scope[options.controllerAs] = modal.controller;\n            }\n          }\n\n          //Open modal now\n          openModal(modalInstance);\n        }, function(reason) {\n          modal.openedDeferred.reject(reason);\n          modal.resultDeferred.reject(reason);\n        });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n","/**\n * meanie-angular-modal - v1.2.0 - 11-0-2016\n * https://github.com/meanie/angular-modal\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Base z-index\n  // var BASE_Z_INDEX = 10000;\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n      return stack.length - 1;\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay'\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        }\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listener\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            options + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick\n        };\n\n        //Create modal instance\n        var modalInstance = {\n          $$modal: modal,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve))).then(function(resolves) {\n\n          //Get template content\n          modal.content = resolves.shift();\n\n          //Determine modal scope and link close/dismiss handlers\n          modal.scope = (options.scope || $rootScope).$new();\n          modal.scope.$close = modalInstance.close;\n          modal.scope.$dismiss = modalInstance.dismiss;\n\n          //Controller given?\n          if (options.controller) {\n\n            //Initialize controller vars\n            var locals = {};\n\n            //Provide scope and modal instance\n            locals.$scope = modal.scope;\n            locals.$modalInstance = modalInstance;\n\n            //Provide other passed locals\n            if (options.locals && typeof options.locals === 'object') {\n              angular.forEach(options.locals, function(value, key) {\n                locals[key] = value;\n              });\n            }\n\n            //Provide resolved values\n            angular.forEach(options.resolve, function(value, key) {\n              locals[key] = resolves.shift();\n            });\n\n            //Create controller instance\n            modal.controller = $controller(options.controller, locals);\n            if (options.controllerAs) {\n              modal.scope[options.controllerAs] = modal.controller;\n            }\n          }\n\n          //Open modal now\n          openModal(modalInstance);\n        }, function(reason) {\n          modal.openedDeferred.reject(reason);\n          modal.resultDeferred.reject(reason);\n        });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}