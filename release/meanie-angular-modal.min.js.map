{"version":3,"sources":["modal.service.js","meanie-angular-modal.min.js"],"names":["window","angular","undefined","module","factory","stack","get","isEmpty","length","add","modalInstance","push","remove","index","indexOf","splice","$animate","$document","$appendAnimated","overlayElement","bodyElement","find","eq","show","overlayClass","element","attr","class","hide","leave","child","parent","children","enter","provider","this","defaults","closeOnEsc","closeOnClick","template","templateUrl","scope","controller","controllerAs","resolve","locals","appendTo","overlay","wrapperClass","onBeforeClose","configs","setDefaults","extend","modal","name","config","forEach","$get","$rootScope","$q","$templateRequest","$injector","$controller","$compile","$modalStack","$modalOverlay","getTemplatePromise","when","getResolvePromises","resolves","promises","item","isFunction","isArray","invoke","isString","openModal","$$modal","html","content","on","event","target","currentTarget","preventDefault","stopPropagation","$apply","closeModal","showOverlay","then","openedDeferred","reason","reject","result","wasDismissed","outcome","resultDeferred","$destroy","removeEventListener","Modal","open","options","Error","defer","opened","promise","close","dismiss","key","keyCode","which","addEventListener","all","concat","shift","$new","$close","$dismiss","$scope","$modalInstance","value","closeAll"],"mappings":"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","file":"meanie-angular-modal.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Base z-index\n  // var BASE_Z_INDEX = 10000;\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n      return stack.length - 1;\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay',\n    onBeforeClose: null\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n        var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n        if (outcome !== true && outcome !== undefined) {\n          return $q.reject(outcome);\n        }\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        }\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listener\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            options + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose\n        };\n\n        //Create modal instance\n        var modalInstance = {\n          $$modal: modal,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve))).then(function(resolves) {\n\n          //Get template content\n          modal.content = resolves.shift();\n\n          //Determine modal scope and link close/dismiss handlers\n          modal.scope = (options.scope || $rootScope).$new();\n          modal.scope.$close = modalInstance.close;\n          modal.scope.$dismiss = modalInstance.dismiss;\n\n          //Controller given?\n          if (options.controller) {\n\n            //Initialize controller vars\n            var locals = {};\n\n            //Provide scope and modal instance\n            locals.$scope = modal.scope;\n            locals.$modalInstance = modalInstance;\n\n            //Provide other passed locals\n            if (options.locals && typeof options.locals === 'object') {\n              angular.forEach(options.locals, function(value, key) {\n                locals[key] = value;\n              });\n            }\n\n            //Provide resolved values\n            angular.forEach(options.resolve, function(value, key) {\n              locals[key] = resolves.shift();\n            });\n\n            //Create controller instance\n            modal.controller = $controller(options.controller, locals);\n            if (options.controllerAs) {\n              modal.scope[options.controllerAs] = modal.controller;\n            }\n          }\n\n          //Open modal now\n          openModal(modalInstance);\n        }, function(reason) {\n          modal.openedDeferred.reject(reason);\n          modal.resultDeferred.reject(reason);\n        });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n","/**\n * meanie-angular-modal - v1.3.0 - 1-1-2016\n * https://github.com/meanie/angular-modal\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Base z-index\n  // var BASE_Z_INDEX = 10000;\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n      return stack.length - 1;\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay',\n    onBeforeClose: null\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n        var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n        if (outcome !== true && outcome !== undefined) {\n          return $q.reject(outcome);\n        }\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        }\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listener\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            options + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose\n        };\n\n        //Create modal instance\n        var modalInstance = {\n          $$modal: modal,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve))).then(function(resolves) {\n\n          //Get template content\n          modal.content = resolves.shift();\n\n          //Determine modal scope and link close/dismiss handlers\n          modal.scope = (options.scope || $rootScope).$new();\n          modal.scope.$close = modalInstance.close;\n          modal.scope.$dismiss = modalInstance.dismiss;\n\n          //Controller given?\n          if (options.controller) {\n\n            //Initialize controller vars\n            var locals = {};\n\n            //Provide scope and modal instance\n            locals.$scope = modal.scope;\n            locals.$modalInstance = modalInstance;\n\n            //Provide other passed locals\n            if (options.locals && typeof options.locals === 'object') {\n              angular.forEach(options.locals, function(value, key) {\n                locals[key] = value;\n              });\n            }\n\n            //Provide resolved values\n            angular.forEach(options.resolve, function(value, key) {\n              locals[key] = resolves.shift();\n            });\n\n            //Create controller instance\n            modal.controller = $controller(options.controller, locals);\n            if (options.controllerAs) {\n              modal.scope[options.controllerAs] = modal.controller;\n            }\n          }\n\n          //Open modal now\n          openModal(modalInstance);\n        }, function(reason) {\n          modal.openedDeferred.reject(reason);\n          modal.resultDeferred.reject(reason);\n        });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}