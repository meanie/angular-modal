{"version":3,"sources":["meanie-angular-modal.min.js","modal.service.js"],"names":["_typeof","Symbol","iterator","obj","constructor","window","angular","undefined","module","factory","stack","get","isEmpty","length","numOpen","isOpen","name","i","isLast","last","add","modalInstance","push","remove","index","indexOf","splice","$animate","$document","$appendAnimated","overlayElement","bodyElement","find","eq","show","overlayClass","element","attr","class","hide","leave","setIndex","baseIndex","numModals","zIndex","style","child","parent","children","enter","provider","this","defaults","closeOnEsc","closeOnClick","template","templateUrl","scope","controller","controllerAs","resolve","locals","appendTo","overlay","wrapperClass","onBeforeClose","configs","setDefaults","extend","modal","config","forEach","$get","$rootScope","$q","$templateRequest","$injector","$controller","$compile","$modalStack","$modalOverlay","getTemplatePromise","when","getResolvePromises","resolves","promises","item","isFunction","isArray","invoke","isString","openModal","$$modal","html","content","on","event","target","currentTarget","preventDefault","stopPropagation","$apply","closeModal","showOverlay","then","openedDeferred","reason","reject","result","wasDismissed","outcome","resultDeferred","$destroy","removeEventListener","broadcastEnter","Modal","open","options","Error","defer","opened","promise","close","dismiss","key","keyCode","which","addEventListener","isTextarea","tagName","defaultPrevented","$broadcast","all","concat","shift","$new","$close","$dismiss","$scope","$modalInstance","value","closeAll"],"mappings":"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","file":"meanie-angular-modal.min.js","sourcesContent":["/**\n * meanie-angular-modal * https://github.com/meanie/angular-modal\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Modal.Service', [])\n\n  /**\n   * Modal stack service\n   */\n  .factory('$modalStack', function $modalStack() {\n\n    //Stack of modals\n    var stack = [];\n\n    //Modal stack interface\n    return {\n\n      /**\n       * Get modal instances stack\n       */\n      get: function get() {\n        return stack;\n      },\n\n      /**\n       * Check if there are open instances\n       */\n      isEmpty: function isEmpty() {\n        return stack.length === 0;\n      },\n\n      /**\n       * Get number of modals that are open\n       */\n      numOpen: function numOpen() {\n        return stack.length;\n      },\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen: function isOpen(name) {\n\n        //Can't distinguish unnamed modals\n        if (!name) {\n          return false;\n        }\n\n        //Check if open\n        for (var i = 0; i < stack.length; i++) {\n          if (stack[i].name === name) {\n            return true;\n          }\n        }\n\n        //Not open\n        return false;\n      },\n\n      /**\n       * Check if a specific modal is last\n       */\n      isLast: function isLast(name) {\n\n        //Can't distinguish unnamed modals or work with an empty stack\n        if (!name || stack.length === 0) {\n          return false;\n        }\n\n        //Get last modal and compare name\n        var last = stack[stack.length - 1];\n        return last.name === name;\n      },\n\n      /**\n       * Add modal instance to stack\n       */\n      add: function add(modalInstance) {\n        stack.push(modalInstance);\n      },\n\n      /**\n       * Remove modal instance from stack\n       */\n      remove: function remove(modalInstance) {\n        var index = stack.indexOf(modalInstance);\n        if (index > -1) {\n          stack.splice(index, 1);\n        }\n      }\n    };\n  })\n\n  /**\n   * Modal overlay service\n   */\n  .factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function ($animate, $document, $appendAnimated) {\n\n    //Global overlay element\n    var overlayElement = void 0;\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Modal overlay service\n     */\n    return {\n\n      /**\n       * Show overlay element\n       */\n      show: function show(overlayClass) {\n\n        //Already visible?\n        if (overlayElement) {\n          return;\n        }\n\n        //Create element\n        overlayElement = angular.element('<div></div>').attr({\n          class: overlayClass\n        });\n\n        //Animate in\n        return $appendAnimated(overlayElement, bodyElement);\n      },\n\n      /**\n       * Hide overlay element\n       */\n      hide: function hide() {\n        if (overlayElement) {\n          $animate.leave(overlayElement);\n          overlayElement = null;\n        }\n      },\n\n      /**\n       * Set the proper z-index\n       */\n      setIndex: function setIndex(baseIndex, numModals) {\n        if (overlayElement) {\n          var zIndex = baseIndex + 2 * (numModals - 1);\n          overlayElement[0].style.zIndex = zIndex;\n        }\n      }\n    };\n  }])\n\n  /**\n   * Append animated helper\n   */\n  .factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n    return function (child, parent) {\n      var children = parent.children();\n      if (children.length > 0) {\n        return $animate.enter(child, parent, children[children.length - 1]);\n      }\n      return $animate.enter(child, parent);\n    };\n  }])\n\n  /**\n   * Modal service\n   */\n  .provider('$modal', function $modalProvider() {\n\n    /**\n     * Defaults\n     */\n    this.defaults = {\n      closeOnEsc: true,\n      closeOnClick: true,\n      template: null,\n      templateUrl: null,\n      scope: null,\n      controller: null,\n      controllerAs: null,\n      resolve: {},\n      locals: null,\n      appendTo: null,\n      overlay: true,\n      wrapperClass: 'modal-wrapper ModalWrapper',\n      overlayClass: 'modal-overlay ModalOverlay',\n      onBeforeClose: null\n    };\n\n    /**\n     * Store of predefined modal configs\n     */\n    this.configs = {};\n\n    /**\n     * Set defaults\n     */\n    this.setDefaults = function (defaults) {\n      this.defaults = angular.extend(this.defaults, defaults || {});\n      return this;\n    };\n\n    /**\n     * Predefine a modal config\n     */\n    this.modal = function (name, config) {\n\n      //Object hash given?\n      if (name && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n        angular.forEach(name, function (config, name) {\n          this.modal(name, config);\n        }, this);\n        return;\n      }\n\n      //Set config and return self\n      this.configs[name] = angular.extend({}, this.defaults, config || {});\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function ($rootScope, $q, $templateRequest, $injector, $controller, $compile, $document, $animate, $modalStack, $modalOverlay, $appendAnimated) {\n\n      //Get defaults and configs\n      var baseIndex = 10000;\n      var defaults = this.defaults;\n      var configs = this.configs;\n\n      //Get body element\n      var bodyElement = $document.find('body').eq(0);\n\n      /**\n       * Helper to get template promise\n       */\n      function getTemplatePromise(template, templateUrl) {\n        if (template) {\n          return $q.when(template);\n        }\n        return $templateRequest(templateUrl, true);\n      }\n\n      /**\n       * Helper to get resolve promises\n       */\n      function getResolvePromises(resolves) {\n        var promises = [];\n        angular.forEach(resolves, function (item) {\n          if (angular.isFunction(item) || angular.isArray(item)) {\n            promises.push($q.when($injector.invoke(item)));\n          } else if (angular.isString(item)) {\n            promises.push($q.when($injector.get(item)));\n          } else {\n            promises.push($q.when(item));\n          }\n        });\n        return promises;\n      }\n\n      /**\n       * Helper to open a modal\n       */\n      function openModal(modalInstance) {\n\n        //Access modal data object\n        var modal = modalInstance.$$modal;\n        var numModals = $modalStack.numOpen() + 1;\n\n        //Create then compile modal element\n        modal.element = angular.element('<div></div>').attr({\n          class: modal.wrapperClass\n        }).html(modal.content);\n        modal.element = $compile(modal.element)(modal.scope);\n        modal.element[0].style.zIndex = baseIndex + 2 * numModals - 1;\n\n        //Close on click?\n        if (modal.closeOnClick) {\n          modal.element.on('click', function (event) {\n            if (event.target === event.currentTarget) {\n              event.preventDefault();\n              event.stopPropagation();\n              $rootScope.$apply(function () {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          });\n        }\n\n        //Add to stack and show overlay\n        $modalStack.add(modalInstance);\n        if (modal.showOverlay) {\n          $modalOverlay.show(modal.overlayClass);\n          $modalOverlay.setIndex(baseIndex, numModals);\n        }\n\n        //Append animated and resolve opened deferred\n        return $appendAnimated(modal.element, modal.parent).then(function () {\n          modal.openedDeferred.resolve(true);\n        }, function (reason) {\n          modal.openedDeferred.reject(reason);\n        });\n      }\n\n      /**\n       * Helper to close a modal\n       */\n      function closeModal(modalInstance, result, wasDismissed) {\n\n        //Access modal data object\n        var modal = modalInstance.$$modal;\n        var numModals = $modalStack.numOpen() - 1;\n\n        //No element present?\n        if (!modal.element) {\n          return $q.when(true);\n        }\n\n        //Call on before close handler if given\n        if (typeof modal.onBeforeClose === 'function') {\n          var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n          if (outcome !== true && outcome !== undefined) {\n            return $q.reject(outcome || 'Close prevented');\n          }\n        }\n\n        //Did we get a result\n        if (wasDismissed) {\n          modal.resultDeferred.reject(result);\n        } else {\n          modal.resultDeferred.resolve(result);\n        }\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        } else {\n          $modalOverlay.setIndex(baseIndex, numModals);\n        }\n\n        //Animate out\n        return $animate.leave(modal.element).then(function () {\n\n          //Clean up scope\n          if (modal.scope) {\n            modal.scope.$destroy();\n            modal.scope = null;\n          }\n\n          //Remove element reference\n          modal.element = null;\n\n          //Remove event listeners\n          $document[0].removeEventListener('keydown', modal.broadcastEnter);\n          if (modal.closeOnEsc) {\n            $document[0].removeEventListener('keydown', modal.closeOnEsc);\n            modal.closeOnEsc = null;\n          }\n        });\n      }\n\n      /**\n       * Class definition\n       */\n      var Modal = {\n\n        /**\n         * Open a new modal\n         */\n        open: function open(name, options) {\n\n          //No name given?\n          if (typeof name !== 'string') {\n            options = name || {};\n            name = '';\n          }\n\n          //Name given? Merge with predefined configs\n          if (name && typeof configs[name] !== 'undefined') {\n            options = angular.extend({}, configs[name], options || {});\n          } else if (name) {\n            throw new Error('String given as options, but config with name ' + name + ' was not predefined');\n          }\n\n          //Validate options\n          options = angular.extend({}, defaults, options || {});\n          options.resolve = options.resolve || {};\n          options.appendTo = options.appendTo || bodyElement;\n\n          //Must have either template or template url specified\n          if (!options.template && !options.templateUrl) {\n            throw new Error('One of template or templateUrl options is required');\n          }\n\n          if (!options.appendTo.length) {\n            throw new Error('Element to append modal to not found in the DOM');\n          }\n\n          //Prepare modal data object\n          var modal = {\n            openedDeferred: $q.defer(),\n            resultDeferred: $q.defer(),\n            parent: options.appendTo,\n            wrapperClass: options.wrapperClass,\n            overlayClass: options.overlayClass,\n            showOverlay: options.overlay,\n            closeOnClick: options.closeOnClick,\n            onBeforeClose: options.onBeforeClose\n          };\n\n          //Create modal instance interface\n          var modalInstance = {\n            $$modal: modal,\n            name: name,\n            opened: modal.openedDeferred.promise,\n            result: modal.resultDeferred.promise,\n            close: function close(result) {\n              return closeModal(modalInstance, result);\n            },\n            dismiss: function dismiss(reason) {\n              return closeModal(modalInstance, reason, true);\n            }\n          };\n\n          //Close on escape?\n          if (options.closeOnEsc) {\n            modal.closeOnEsc = function (event) {\n              var key = event.keyCode || event.which;\n              if (key === 27 && $modalStack.isLast(name)) {\n                $rootScope.$apply(function () {\n                  closeModal(modalInstance, 'cancel', true);\n                });\n              }\n            };\n            $document[0].addEventListener('keydown', modal.closeOnEsc);\n          }\n\n          //Enter broadcast\n          modal.broadcastEnter = function (event) {\n            var key = event.keyCode || event.which;\n            var isTextarea = event.target.tagName === 'TEXTAREA';\n            if (key === 13 && !event.defaultPrevented && !isTextarea) {\n              $rootScope.$broadcast('$modalEnterKey', modalInstance, event);\n            }\n          };\n          $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n          //Wait for template and resolves to resolve\n          $q.all([getTemplatePromise(options.template, options.templateUrl)].concat(getResolvePromises(options.resolve))).then(function (resolves) {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/dismiss handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$dismiss = modalInstance.dismiss;\n\n            //Controller given?\n            if (options.controller) {\n              (function () {\n\n                //Initialize controller vars\n                var locals = {};\n\n                //Provide scope and modal instance\n                locals.$scope = modal.scope;\n                locals.$modalInstance = modalInstance;\n\n                //Provide other passed locals\n                if (options.locals && _typeof(options.locals) === 'object') {\n                  angular.forEach(options.locals, function (value, key) {\n                    locals[key] = value;\n                  });\n                }\n\n                //Provide resolved values\n                angular.forEach(options.resolve, function (value, key) {\n                  locals[key] = resolves.shift();\n                });\n\n                //Create controller instance\n                modal.controller = $controller(options.controller, locals);\n                if (options.controllerAs) {\n                  modal.scope[options.controllerAs] = modal.controller;\n                }\n              })();\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          }).catch(function (reason) {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n          //Return modal instance\n          return modalInstance;\n        },\n\n        /**\n         * Close all modals\n         */\n        closeAll: function closeAll() {\n          var stack = $modalStack.get();\n          angular.forEach(stack, function (modalInstance) {\n            closeModal(modalInstance, 'cancel', true);\n          });\n        },\n\n        /**\n         * Check if a specific modal is open\n         */\n        isOpen: function isOpen(name) {\n          return $modalStack.isOpen(name);\n        }\n      };\n\n      //Return the service\n      return Modal;\n    }];\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Stack of modals\n  let stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Get number of modals that are open\n     */\n    numOpen: function() {\n      return stack.length;\n    },\n\n    /**\n     * Check if a specific modal is open\n     */\n    isOpen: function(name) {\n\n      //Can't distinguish unnamed modals\n      if (!name) {\n        return false;\n      }\n\n      //Check if open\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i].name === name) {\n          return true;\n        }\n      }\n\n      //Not open\n      return false;\n    },\n\n    /**\n     * Check if a specific modal is last\n     */\n    isLast: function(name) {\n\n      //Can't distinguish unnamed modals or work with an empty stack\n      if (!name || stack.length === 0) {\n        return false;\n      }\n\n      //Get last modal and compare name\n      let last = stack[stack.length - 1];\n      return (last.name === name);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      let index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    },\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', function($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  let overlayElement;\n  let bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass,\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    },\n\n    /**\n     * Set the proper z-index\n     */\n    setIndex: function(baseIndex, numModals) {\n      if (overlayElement) {\n        let zIndex = baseIndex + 2 * (numModals - 1);\n        overlayElement[0].style.zIndex = zIndex;\n      }\n    },\n  };\n})\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', function $appendAnimated($animate) {\n  return function(child, parent) {\n    let children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n})\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper ModalWrapper',\n    overlayClass: 'modal-overlay ModalOverlay',\n    onBeforeClose: null,\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    let baseIndex = 10000;\n    let defaults = this.defaults;\n    let configs = this.configs;\n\n    //Get body element\n    let bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      let promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      let modal = modalInstance.$$modal;\n      let numModals = $modalStack.numOpen() + 1;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass,\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n      modal.element[0].style.zIndex = baseIndex + (2 * numModals) - 1;\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      let modal = modalInstance.$$modal;\n      let numModals = $modalStack.numOpen() - 1;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n        let outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n        if (outcome !== true && outcome !== undefined) {\n          return $q.reject(outcome || 'Close prevented');\n        }\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Remove from stack\n      $modalStack.remove(modalInstance);\n      if ($modalStack.isEmpty()) {\n        $modalOverlay.hide();\n      }\n      else {\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listeners\n        $document[0].removeEventListener('keydown', modal.broadcastEnter);\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    let Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            name + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM');\n        }\n\n        //Prepare modal data object\n        let modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose,\n        };\n\n        //Create modal instance interface\n        let modalInstance = {\n          $$modal: modal,\n          name: name,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          },\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            let key = event.keyCode || event.which;\n            if (key === 27 && $modalStack.isLast(name)) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Enter broadcast\n        modal.broadcastEnter = function(event) {\n          let key = event.keyCode || event.which;\n          let isTextarea = (event.target.tagName === 'TEXTAREA');\n          if (key === 13 && !event.defaultPrevented && !isTextarea) {\n            $rootScope.$broadcast('$modalEnterKey', modalInstance, event);\n          }\n        };\n        $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl),\n        ].concat(getResolvePromises(options.resolve)))\n          .then(function(resolves) {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/dismiss handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$dismiss = modalInstance.dismiss;\n\n            //Controller given?\n            if (options.controller) {\n\n              //Initialize controller vars\n              let locals = {};\n\n              //Provide scope and modal instance\n              locals.$scope = modal.scope;\n              locals.$modalInstance = modalInstance;\n\n              //Provide other passed locals\n              if (options.locals && typeof options.locals === 'object') {\n                angular.forEach(options.locals, function(value, key) {\n                  locals[key] = value;\n                });\n              }\n\n              //Provide resolved values\n              angular.forEach(options.resolve, function(value, key) {\n                locals[key] = resolves.shift();\n              });\n\n              //Create controller instance\n              modal.controller = $controller(options.controller, locals);\n              if (options.controllerAs) {\n                modal.scope[options.controllerAs] = modal.controller;\n              }\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          })\n          .catch(function(reason) {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        let stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      },\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen: function(name) {\n        return $modalStack.isOpen(name);\n      },\n    };\n\n    //Return the service\n    return Modal;\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}