{"version":3,"sources":["meanie-angular-modal.min.js","append-animated.service.js","modal-overlay.service.js","modal-stack.service.js","modal.service.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","window","angular","undefined","module","factory","$animate","child","parent","children","enter","$document","$appendAnimated","overlayElement","bodyElement","find","eq","show","overlayClass","element","attr","class","hide","leave","setIndex","baseIndex","numModals","zIndex","style","stack","get","isEmpty","numOpen","isOpen","name","isLast","last","add","modalInstance","push","remove","index","indexOf","splice","_typeof","Symbol","iterator","obj","constructor","provider","REASON_CANCEL","REASON_CLOSE_PREVENTED","this","defaults","closeOnEsc","closeOnClick","template","templateUrl","scope","controller","controllerAs","resolve","locals","appendTo","overlay","wrapperClass","onBeforeClose","once","configs","setDefaults","extend","modal","config","_this","forEach","$get","$rootScope","$q","$templateRequest","$injector","$controller","$compile","$modalStack","$modalOverlay","getTemplatePromise","when","getResolvePromises","resolves","promises","item","isFunction","invoke","isString","openModal","$$modal","html","content","on","event","target","currentTarget","preventDefault","stopPropagation","$apply","closeModal","showOverlay","$onInit","call","then","$postLink","openedDeferred","reason","reject","confirmCloseModal","result","wasDismissed","closedDeferred","resultDeferred","$onDestroy","$destroy","removeEventListener","broadcastEnter","outcome","Modal","open","options","closeOthers","Error","defer","opened","promise","closed","close","key","keyCode","which","addEventListener","isTextarea","tagName","defaultPrevented","$broadcast","all","concat","shift","$new","$close","$resolve","$scope","$modalInstance","$element","value","closeAll"],"mappings":"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","file":"meanie-angular-modal.min.js","sourcesContent":["/**\n * meanie-angular-modal * https://github.com/meanie/angular-modal\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('AppendAnimated.Service', [])\n\n  /**\n   * Append animated helper\n   */\n  .factory('$appendAnimated', ['$animate', function ($animate) {\n    return function (child, parent) {\n      var children = parent.children();\n      if (children.length > 0) {\n        return $animate.enter(child, parent, children[children.length - 1]);\n      }\n      return $animate.enter(child, parent);\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('ModalOverlay.Service', ['AppendAnimated.Service'])\n\n  /**\n   * Modal overlay service\n   */\n  .factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function ($animate, $document, $appendAnimated) {\n\n    //Global overlay element\n    var overlayElement = void 0;\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Modal overlay service\n     */\n    return {\n\n      /**\n       * Show overlay element\n       */\n\n      show: function show(overlayClass) {\n\n        //Already visible?\n        if (overlayElement) {\n          return;\n        }\n\n        //Create element\n        overlayElement = angular.element('<div></div>').attr({\n          class: overlayClass\n        });\n\n        //Animate in\n        return $appendAnimated(overlayElement, bodyElement);\n      },\n\n\n      /**\n       * Hide overlay element\n       */\n      hide: function hide() {\n        if (overlayElement) {\n          $animate.leave(overlayElement);\n          overlayElement = null;\n        }\n      },\n\n\n      /**\n       * Set the proper z-index\n       */\n      setIndex: function setIndex(baseIndex, numModals) {\n        if (overlayElement) {\n          var zIndex = baseIndex + 2 * (numModals - 1);\n          overlayElement[0].style.zIndex = zIndex;\n        }\n      }\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('ModalStack.Service', [])\n\n  /**\n   * Modal stack service\n   */\n  .factory('$modalStack', function () {\n\n    //Stack of modals\n    var stack = [];\n\n    //Modal stack interface\n    return {\n\n      /**\n       * Get modal instances stack\n       */\n\n      get: function get() {\n        return stack;\n      },\n\n\n      /**\n       * Check if there are open instances\n       */\n      isEmpty: function isEmpty() {\n        return stack.length === 0;\n      },\n\n\n      /**\n       * Get number of modals that are open\n       */\n      numOpen: function numOpen() {\n        return stack.length;\n      },\n\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen: function isOpen(name) {\n\n        //Can't distinguish unnamed modals\n        if (!name) {\n          return false;\n        }\n\n        //Check if open\n        for (var i = 0; i < stack.length; i++) {\n          if (stack[i].name === name) {\n            return true;\n          }\n        }\n\n        //Not open\n        return false;\n      },\n\n\n      /**\n       * Check if a specific modal is last\n       */\n      isLast: function isLast(name) {\n\n        //Can't distinguish unnamed modals or work with an empty stack\n        if (!name || stack.length === 0) {\n          return false;\n        }\n\n        //Get last modal and compare name\n        var last = stack[stack.length - 1];\n        return last.name === name;\n      },\n\n\n      /**\n       * Add modal instance to stack\n       */\n      add: function add(modalInstance) {\n        stack.push(modalInstance);\n      },\n\n\n      /**\n       * Remove modal instance from stack\n       */\n      remove: function remove(modalInstance) {\n        var index = stack.indexOf(modalInstance);\n        if (index > -1) {\n          stack.splice(index, 1);\n        }\n      }\n    };\n  });\n})(window, window.angular);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Modal.Service', ['ModalStack.Service', 'ModalOverlay.Service', 'AppendAnimated.Service'])\n\n  /**\n   * Modal service\n   */\n  .provider('$modal', function $modalProvider() {\n\n    //Reasons\n    var REASON_CANCEL = 'cancel';\n    var REASON_CLOSE_PREVENTED = 'close prevented';\n\n    /**\n     * Defaults\n     */\n    this.defaults = {\n      closeOnEsc: true,\n      closeOnClick: true,\n      template: null,\n      templateUrl: null,\n      scope: null,\n      controller: null,\n      controllerAs: '$ctrl',\n      resolve: {},\n      locals: null,\n      appendTo: null,\n      overlay: true,\n      wrapperClass: 'modal-wrapper ModalWrapper',\n      overlayClass: 'modal-overlay ModalOverlay',\n      onBeforeClose: null,\n      once: false\n    };\n\n    /**\n     * Store of predefined modal configs\n     */\n    this.configs = {};\n\n    /**\n     * Set defaults\n     */\n    this.setDefaults = function (defaults) {\n      this.defaults = angular.extend(this.defaults, defaults || {});\n      return this;\n    };\n\n    /**\n     * Predefine a modal config\n     */\n    this.modal = function (name, config) {\n      var _this = this;\n\n      //Object hash given?\n      if (name && (typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n        angular.forEach(name, function (config, name) {\n          _this.modal(name, config);\n        }, this);\n        return;\n      }\n\n      //Set config and return self\n      this.configs[name] = angular.extend({}, this.defaults, config || {});\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function ($rootScope, $q, $templateRequest, $injector, $controller, $compile, $document, $animate, $modalStack, $modalOverlay, $appendAnimated) {\n\n      //Get defaults and configs\n      var baseIndex = 10000;\n      var defaults = this.defaults;\n      var configs = this.configs;\n\n      //Get body element\n      var bodyElement = $document.find('body').eq(0);\n\n      /**\n       * Helper to get template promise\n       */\n      function getTemplatePromise(template, templateUrl) {\n        if (template) {\n          return $q.when(template);\n        }\n        return $templateRequest(templateUrl, true);\n      }\n\n      /**\n       * Helper to get resolve promises\n       */\n      function getResolvePromises(resolves) {\n        var promises = [];\n        angular.forEach(resolves, function (item) {\n          if (angular.isFunction(item) || angular.isArray(item)) {\n            promises.push($q.when($injector.invoke(item)));\n          } else if (angular.isString(item)) {\n            promises.push($q.when($injector.get(item)));\n          } else {\n            promises.push($q.when(item));\n          }\n        });\n        return promises;\n      }\n\n      /**\n       * Helper to open a modal\n       */\n      function openModal(modalInstance) {\n\n        //Access modal data object\n        var modal = modalInstance.$$modal;\n        var numModals = $modalStack.numOpen() + 1;\n\n        //Create then compile modal element\n        modal.element.attr({ class: modal.wrapperClass }).html(modal.content);\n        modal.element = $compile(modal.element)(modal.scope);\n        modal.element[0].style.zIndex = baseIndex + 2 * numModals - 1;\n\n        //Close on click handler\n        //NOTE: This is applied on the base modal element, e.g. invisible\n        //background, not the overlay. This is because clicking on the overlay\n        //would then close all modals, which is probably not what you'd want.\n        if (modal.closeOnClick) {\n          modal.element.on('click', function (event) {\n            if (event.target === event.currentTarget) {\n              event.preventDefault();\n              event.stopPropagation();\n              $rootScope.$apply(function () {\n                closeModal(modalInstance, REASON_CANCEL, true);\n              });\n            }\n          });\n        }\n\n        //Add to stack and show overlay\n        $modalStack.add(modalInstance);\n        if (modal.showOverlay) {\n          $modalOverlay.show(modal.overlayClass);\n          $modalOverlay.setIndex(baseIndex, numModals);\n        }\n\n        //Call controller on init now\n        if (modal.controller && modal.controller.$onInit) {\n          modal.controller.$onInit.call(modal.controller);\n        }\n\n        //Append animated and resolve opened deferred\n        return $appendAnimated(modal.element, modal.parent).then(function () {\n\n          //Call controller $postLink\n          if (modal.controller && modal.controller.$postLink) {\n            modal.controller.$postLink.call(modal.controller);\n          }\n\n          //Resolve open\n          modal.openedDeferred.resolve(true);\n        }).catch(function (reason) {\n          return modal.openedDeferred.reject(reason);\n        });\n      }\n\n      /**\n       * Helper to actually close modal once confirmed\n       */\n      function confirmCloseModal(modalInstance, result, wasDismissed) {\n\n        //Access modal data object\n        var modal = modalInstance.$$modal;\n        var numModals = $modalStack.numOpen() - 1;\n\n        //No element present?\n        if (!modal.element) {\n          return $q.when(true);\n        }\n\n        //If dismissed, use only closed deferred\n        if (wasDismissed) {\n          modal.closedDeferred.resolve(result);\n        } else {\n          modal.resultDeferred.resolve(result);\n        }\n\n        //Remove from stack\n        $modalStack.remove(modalInstance);\n        if ($modalStack.isEmpty()) {\n          $modalOverlay.hide();\n        } else {\n          $modalOverlay.setIndex(baseIndex, numModals);\n        }\n\n        //Animate out\n        return $animate.leave(modal.element).then(function () {\n\n          //Call controller on destroy now\n          if (modal.controller && modal.controller.$onDestroy) {\n            modal.controller.$onDestroy.call(modal.controller);\n          }\n\n          //Clean up scope\n          if (modal.scope) {\n            modal.scope.$destroy();\n            modal.scope = null;\n          }\n\n          //Remove element reference\n          modal.element = null;\n\n          //Remove event listeners\n          $document[0].removeEventListener('keydown', modal.broadcastEnter);\n          if (modal.closeOnEsc) {\n            $document[0].removeEventListener('keydown', modal.closeOnEsc);\n            modal.closeOnEsc = null;\n          }\n        });\n      }\n\n      /**\n       * Helper to close a modal\n       */\n      function closeModal(modalInstance, result, wasDismissed) {\n\n        //Access modal data object\n        var modal = modalInstance.$$modal;\n\n        //No element present?\n        if (!modal.element) {\n          return $q.when(true);\n        }\n\n        //Call on before close handler if given\n        if (typeof modal.onBeforeClose === 'function') {\n\n          //Get outcome\n          var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n\n          //Handle promise\n          if (outcome && typeof outcome.then === 'function') {\n            return outcome.then(function () {\n              return confirmCloseModal(modalInstance, result, wasDismissed);\n            }).catch(function (reason) {\n              return $q.reject(reason || REASON_CLOSE_PREVENTED);\n            });\n          }\n\n          //Handle other reject reasons\n          if (typeof outcome !== 'undefined' && outcome !== true) {\n            return $q.reject(outcome || REASON_CLOSE_PREVENTED);\n          }\n        }\n\n        //Confirm\n        return confirmCloseModal(modalInstance, result, wasDismissed);\n      }\n\n      /**\n       * Class definition\n       */\n      var Modal = {\n\n        /**\n         * Open a new modal\n         */\n\n        open: function open(name, options, closeOthers) {\n\n          //No name given?\n          if (typeof name !== 'string') {\n            options = name || {};\n            name = '';\n          }\n\n          //Name given? Merge with predefined configs\n          if (name && typeof configs[name] !== 'undefined') {\n            options = angular.extend({}, configs[name], options || {});\n          } else if (name) {\n            throw new Error('String given as options, but config with name ' + name + ' was not predefined');\n          }\n\n          //Check if already open\n          if (name && options.once && $modalStack.isOpen(name)) {\n            return null;\n          }\n\n          //Validate options\n          options = angular.extend({}, defaults, options || {});\n          options.resolve = options.resolve || {};\n          options.appendTo = options.appendTo || bodyElement;\n\n          //Must have either template or template url specified\n          if (!options.template && !options.templateUrl) {\n            throw new Error('One of template or templateUrl options is required');\n          }\n\n          if (!options.appendTo.length) {\n            throw new Error('Element to append modal to not found in the DOM');\n          }\n\n          //Prepare modal data object\n          var modal = {\n            openedDeferred: $q.defer(),\n            closedDeferred: $q.defer(),\n            resultDeferred: $q.defer(),\n            parent: options.appendTo,\n            wrapperClass: options.wrapperClass,\n            overlayClass: options.overlayClass,\n            showOverlay: options.overlay,\n            closeOnClick: options.closeOnClick,\n            onBeforeClose: options.onBeforeClose,\n            element: angular.element('<div></div>')\n          };\n\n          //Create modal instance interface\n          var modalInstance = {\n            $$modal: modal,\n            name: name,\n            opened: modal.openedDeferred.promise,\n            closed: modal.closedDeferred.promise,\n            result: modal.resultDeferred.promise,\n            resolve: function resolve(result) {\n              return closeModal(modalInstance, result);\n            },\n            close: function close(reason) {\n              return closeModal(modalInstance, reason, true);\n            }\n          };\n\n          //Close on escape?\n          if (options.closeOnEsc) {\n            modal.closeOnEsc = function (event) {\n              var key = event.keyCode || event.which;\n              if (key === 27 && (!name || $modalStack.isLast(name))) {\n                $rootScope.$apply(function () {\n                  closeModal(modalInstance, REASON_CANCEL, true);\n                });\n              }\n            };\n            $document[0].addEventListener('keydown', modal.closeOnEsc);\n          }\n\n          //Enter broadcast\n          modal.broadcastEnter = function (event) {\n            var key = event.keyCode || event.which;\n            var isTextarea = event.target.tagName === 'TEXTAREA';\n            if (key === 13 && !event.defaultPrevented && !isTextarea) {\n              $rootScope.$broadcast('$modalEnterKey', modalInstance, event);\n            }\n          };\n          $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n          //Wait for template and resolves to resolve\n          $q.all([getTemplatePromise(options.template, options.templateUrl)].concat(_toConsumableArray(getResolvePromises(options.resolve)))).then(function (resolves) {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/resolve handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$resolve = modalInstance.resolve;\n\n            //Controller given?\n            if (options.controller) {\n              (function () {\n\n                //Initialize controller vars\n                var locals = {};\n\n                //Provide scope and modal instance\n                locals.$scope = modal.scope;\n                locals.$modalInstance = modalInstance;\n                locals.$element = modal.element;\n\n                //Provide other passed locals\n                if (options.locals && _typeof(options.locals) === 'object') {\n                  angular.forEach(options.locals, function (value, key) {\n                    locals[key] = value;\n                  });\n                }\n\n                //Provide resolved values\n                angular.forEach(options.resolve, function (value, key) {\n                  locals[key] = resolves.shift();\n                });\n\n                //Create controller instance\n                modal.controller = $controller(options.controller, locals);\n                if (options.controllerAs) {\n                  modal.scope[options.controllerAs] = modal.controller;\n                }\n\n                //Attach locals to controller\n                angular.forEach(options.locals, function (value, key) {\n                  modal.controller[key] = value;\n                });\n              })();\n            }\n\n            //Close others?\n            if (closeOthers) {\n              Modal.closeAll();\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          }).catch(function (reason) {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n          //Return modal instance\n          return modalInstance;\n        },\n\n\n        /**\n         * Close all modals\n         */\n        closeAll: function closeAll() {\n          var stack = $modalStack.get();\n          angular.forEach(stack, function (modalInstance) {\n            closeModal(modalInstance, REASON_CANCEL, true);\n          });\n        },\n\n\n        /**\n         * Check if a specific modal is open\n         */\n        isOpen: function isOpen(name) {\n          return $modalStack.isOpen(name);\n        }\n      };\n\n      //Return the service\n      return Modal;\n    }];\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('AppendAnimated.Service', [])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', $animate => {\n  return function(child, parent) {\n    let children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('ModalOverlay.Service', [\n  'AppendAnimated.Service',\n])\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ($animate, $document, $appendAnimated) => {\n\n  //Global overlay element\n  let overlayElement;\n  let bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass,\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    },\n\n    /**\n     * Set the proper z-index\n     */\n    setIndex(baseIndex, numModals) {\n      if (overlayElement) {\n        const zIndex = baseIndex + 2 * (numModals - 1);\n        overlayElement[0].style.zIndex = zIndex;\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('ModalStack.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', () => {\n\n  //Stack of modals\n  const stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Get number of modals that are open\n     */\n    numOpen() {\n      return stack.length;\n    },\n\n    /**\n     * Check if a specific modal is open\n     */\n    isOpen(name) {\n\n      //Can't distinguish unnamed modals\n      if (!name) {\n        return false;\n      }\n\n      //Check if open\n      for (let i = 0; i < stack.length; i++) {\n        if (stack[i].name === name) {\n          return true;\n        }\n      }\n\n      //Not open\n      return false;\n    },\n\n    /**\n     * Check if a specific modal is last\n     */\n    isLast(name) {\n\n      //Can't distinguish unnamed modals or work with an empty stack\n      if (!name || stack.length === 0) {\n        return false;\n      }\n\n      //Get last modal and compare name\n      const last = stack[stack.length - 1];\n      return (last.name === name);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add(modalInstance) {\n      stack.push(modalInstance);\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove(modalInstance) {\n      const index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [\n  'ModalStack.Service',\n  'ModalOverlay.Service',\n  'AppendAnimated.Service',\n])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  //Reasons\n  const REASON_CANCEL = 'cancel';\n  const REASON_CLOSE_PREVENTED = 'close prevented';\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: '$ctrl',\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper ModalWrapper',\n    overlayClass: 'modal-overlay ModalOverlay',\n    onBeforeClose: null,\n    once: false,\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, (config, name) => {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    const baseIndex = 10000;\n    const defaults = this.defaults;\n    const configs = this.configs;\n\n    //Get body element\n    const bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      let promises = [];\n      angular.forEach(resolves, item => {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      const modal = modalInstance.$$modal;\n      const numModals = $modalStack.numOpen() + 1;\n\n      //Create then compile modal element\n      modal.element\n        .attr({class: modal.wrapperClass})\n        .html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n      modal.element[0].style.zIndex = baseIndex + (2 * numModals) - 1;\n\n      //Close on click handler\n      //NOTE: This is applied on the base modal element, e.g. invisible\n      //background, not the overlay. This is because clicking on the overlay\n      //would then close all modals, which is probably not what you'd want.\n      if (modal.closeOnClick) {\n        modal.element.on('click', event => {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(() => {\n              closeModal(modalInstance, REASON_CANCEL, true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Call controller on init now\n      if (modal.controller && modal.controller.$onInit) {\n        modal.controller.$onInit.call(modal.controller);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent)\n        .then(() => {\n\n          //Call controller $postLink\n          if (modal.controller && modal.controller.$postLink) {\n            modal.controller.$postLink.call(modal.controller);\n          }\n\n          //Resolve open\n          modal.openedDeferred.resolve(true);\n        })\n        .catch(reason => modal.openedDeferred.reject(reason));\n    }\n\n    /**\n     * Helper to actually close modal once confirmed\n     */\n    function confirmCloseModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      const modal = modalInstance.$$modal;\n      const numModals = $modalStack.numOpen() - 1;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //If dismissed, use only closed deferred\n      if (wasDismissed) {\n        modal.closedDeferred.resolve(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Remove from stack\n      $modalStack.remove(modalInstance);\n      if ($modalStack.isEmpty()) {\n        $modalOverlay.hide();\n      }\n      else {\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Animate out\n      return $animate\n        .leave(modal.element)\n        .then(() => {\n\n          //Call controller on destroy now\n          if (modal.controller && modal.controller.$onDestroy) {\n            modal.controller.$onDestroy.call(modal.controller);\n          }\n\n          //Clean up scope\n          if (modal.scope) {\n            modal.scope.$destroy();\n            modal.scope = null;\n          }\n\n          //Remove element reference\n          modal.element = null;\n\n          //Remove event listeners\n          $document[0].removeEventListener('keydown', modal.broadcastEnter);\n          if (modal.closeOnEsc) {\n            $document[0].removeEventListener('keydown', modal.closeOnEsc);\n            modal.closeOnEsc = null;\n          }\n        });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      let modal = modalInstance.$$modal;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n\n        //Get outcome\n        let outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n\n        //Handle promise\n        if (outcome && typeof outcome.then === 'function') {\n          return outcome\n            .then(() => confirmCloseModal(modalInstance, result, wasDismissed))\n            .catch(reason => $q.reject(reason || REASON_CLOSE_PREVENTED));\n        }\n\n        //Handle other reject reasons\n        if (typeof outcome !== 'undefined' && outcome !== true) {\n          return $q.reject(outcome || REASON_CLOSE_PREVENTED);\n        }\n      }\n\n      //Confirm\n      return confirmCloseModal(modalInstance, result, wasDismissed);\n    }\n\n    /**\n     * Class definition\n     */\n    let Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open(name, options, closeOthers) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            name + ' was not predefined');\n        }\n\n        //Check if already open\n        if (name && options.once && $modalStack.isOpen(name)) {\n          return null;\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM');\n        }\n\n        //Prepare modal data object\n        const modal = {\n          openedDeferred: $q.defer(),\n          closedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose,\n          element: angular.element('<div></div>'),\n        };\n\n        //Create modal instance interface\n        const modalInstance = {\n          $$modal: modal,\n          name,\n          opened: modal.openedDeferred.promise,\n          closed: modal.closedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          resolve(result) {\n            return closeModal(modalInstance, result);\n          },\n          close(reason) {\n            return closeModal(modalInstance, reason, true);\n          },\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            const key = event.keyCode || event.which;\n            if (key === 27 && (!name || $modalStack.isLast(name))) {\n              $rootScope.$apply(() => {\n                closeModal(modalInstance, REASON_CANCEL, true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Enter broadcast\n        modal.broadcastEnter = function(event) {\n          const key = event.keyCode || event.which;\n          const isTextarea = (event.target.tagName === 'TEXTAREA');\n          if (key === 13 && !event.defaultPrevented && !isTextarea) {\n            $rootScope.$broadcast('$modalEnterKey', modalInstance, event);\n          }\n        };\n        $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl),\n          ...getResolvePromises(options.resolve),\n        ])\n          .then(resolves => {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/resolve handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$resolve = modalInstance.resolve;\n\n            //Controller given?\n            if (options.controller) {\n\n              //Initialize controller vars\n              const locals = {};\n\n              //Provide scope and modal instance\n              locals.$scope = modal.scope;\n              locals.$modalInstance = modalInstance;\n              locals.$element = modal.element;\n\n              //Provide other passed locals\n              if (options.locals && typeof options.locals === 'object') {\n                angular.forEach(options.locals, function(value, key) {\n                  locals[key] = value;\n                });\n              }\n\n              //Provide resolved values\n              angular.forEach(options.resolve, function(value, key) {\n                locals[key] = resolves.shift();\n              });\n\n              //Create controller instance\n              modal.controller = $controller(options.controller, locals);\n              if (options.controllerAs) {\n                modal.scope[options.controllerAs] = modal.controller;\n              }\n\n              //Attach locals to controller\n              angular.forEach(options.locals, (value, key) => {\n                modal.controller[key] = value;\n              });\n            }\n\n            //Close others?\n            if (closeOthers) {\n              Modal.closeAll();\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          })\n          .catch(reason => {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll() {\n        const stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, REASON_CANCEL, true);\n        });\n      },\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen(name) {\n        return $modalStack.isOpen(name);\n      },\n    };\n\n    //Return the service\n    return Modal;\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}