{"version":3,"sources":["modal.service.js","meanie-angular-modal.min.js"],"names":["window","angular","undefined","module","factory","stack","get","isEmpty","length","numOpen","isOpen","name","i","isLast","last","add","modalInstance","push","remove","index","indexOf","splice","$animate","$document","$appendAnimated","overlayElement","bodyElement","find","eq","show","overlayClass","element","attr","class","hide","leave","setIndex","baseIndex","numModals","zIndex","style","child","parent","children","enter","provider","this","defaults","closeOnEsc","closeOnClick","template","templateUrl","scope","controller","controllerAs","resolve","locals","appendTo","overlay","wrapperClass","onBeforeClose","configs","setDefaults","extend","modal","config","forEach","$get","$rootScope","$q","$templateRequest","$injector","$controller","$compile","$modalStack","$modalOverlay","getTemplatePromise","when","getResolvePromises","resolves","promises","item","isFunction","isArray","invoke","isString","openModal","$$modal","html","content","on","event","target","currentTarget","preventDefault","stopPropagation","$apply","closeModal","showOverlay","then","openedDeferred","reason","reject","result","wasDismissed","outcome","resultDeferred","$destroy","removeEventListener","broadcastEnter","Modal","open","options","Error","defer","opened","promise","close","dismiss","key","keyCode","which","addEventListener","$broadcast","all","concat","shift","$new","$close","$dismiss","$scope","$modalInstance","value","closeAll"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,oBAKAC,QAAA,cAAA,WAGA,GAAAC,KAGA,QAKAC,IAAA,WACA,MAAAD,IAMAE,QAAA,WACA,MAAA,KAAAF,EAAAG,QAMAC,QAAA,WACA,MAAAJ,GAAAG,QAMAE,OAAA,SAAAC,GAGA,IAAAA,EACA,OAAA,CAIA,KAAA,GAAAC,GAAA,EAAAA,EAAAP,EAAAG,OAAAI,IACA,GAAAP,EAAAO,GAAAD,OAAAA,EACA,OAAA,CAKA,QAAA,GAMAE,OAAA,SAAAF,GAGA,IAAAA,GAAA,IAAAN,EAAAG,OACA,OAAA,CAIA,IAAAM,GAAAT,EAAAA,EAAAG,OAAA,EACA,OAAAM,GAAAH,OAAAA,GAMAI,IAAA,SAAAC,GACAX,EAAAY,KAAAD,IAMAE,OAAA,SAAAF,GACA,GAAAG,GAAAd,EAAAe,QAAAJ,EACAG,GAAA,IACAd,EAAAgB,OAAAF,EAAA,OASAf,QAAA,iBAAA,WAAA,YAAA,kBAAA,SAAAkB,EAAAC,EAAAC,GAGA,GAAAC,GACAC,EAAAH,EAAAI,KAAA,QAAAC,GAAA,EAKA,QAKAC,KAAA,SAAAC,GAGA,MAAAL,GAAA,QAKAA,EAAAxB,EAAA8B,QAAA,eAAAC,MACAC,QAAAH,IAIAN,EAAAC,EAAAC,KAMAQ,KAAA,WACAT,IACAH,EAAAa,MAAAV,GACAA,EAAA,OAOAW,SAAA,SAAAC,EAAAC,GACA,GAAAb,EAAA,CACA,GAAAc,GAAAF,EAAA,GAAAC,EAAA,EACAb,GAAA,GAAAe,MAAAD,OAAAA,QASAnC,QAAA,mBAAA,WAAA,SAAAkB,GACA,MAAA,UAAAmB,EAAAC,GACA,GAAAC,GAAAD,EAAAC,UACA,OAAAA,GAAAnC,OAAA,EACAc,EAAAsB,MAAAH,EAAAC,EAAAC,EAAAA,EAAAnC,OAAA,IAEAc,EAAAsB,MAAAH,EAAAC,OAOAG,SAAA,SAAA,WAKAC,KAAAC,UACAC,YAAA,EACAC,cAAA,EACAC,SAAA,KACAC,YAAA,KACAC,MAAA,KACAC,WAAA,KACAC,aAAA,KACAC,WACAC,OAAA,KACAC,SAAA,KACAC,SAAA,EACAC,aAAA,gBACA7B,aAAA,gBACA8B,cAAA,MAMAd,KAAAe,WAKAf,KAAAgB,YAAA,SAAAf,GAEA,MADAD,MAAAC,SAAA9C,EAAA8D,OAAAjB,KAAAC,SAAAA,OACAD,MAMAA,KAAAkB,MAAA,SAAArD,EAAAsD,GAGA,MAAAtD,IAAA,gBAAAA,OACAV,GAAAiE,QAAAvD,EAAA,SAAAsD,EAAAtD,GACAmC,KAAAkB,MAAArD,EAAAsD,IACAnB,OAKAA,KAAAe,QAAAlD,GAAAV,EAAA8D,UAAAjB,KAAAC,SAAAkB,OACAnB,OAMAA,KAAAqB,MAAA,aAAA,KAAA,mBAAA,YAAA,cAAA,WAAA,YAAA,WAAA,cAAA,gBAAA,kBAAA,SACAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAlD,EAAAD,EAAAoD,EAAAC,EACAnD,GAcA,QAAAoD,GAAA1B,EAAAC,GACA,MAAAD,GACAmB,EAAAQ,KAAA3B,GAEAoB,EAAAnB,GAAA,GAMA,QAAA2B,GAAAC,GACA,GAAAC,KAYA,OAXA/E,GAAAiE,QAAAa,EAAA,SAAAE,GACAhF,EAAAiF,WAAAD,IAAAhF,EAAAkF,QAAAF,GACAD,EAAA/D,KAAAoD,EAAAQ,KAAAN,EAAAa,OAAAH,KAEAhF,EAAAoF,SAAAJ,GACAD,EAAA/D,KAAAoD,EAAAQ,KAAAN,EAAAjE,IAAA2E,KAGAD,EAAA/D,KAAAoD,EAAAQ,KAAAI,MAGAD,EAMA,QAAAM,GAAAtE,GAGA,GAAAgD,GAAAhD,EAAAuE,QACAjD,EAAAoC,EAAAjE,UAAA,CA8BA,OA3BAuD,GAAAjC,QAAA9B,EAAA8B,QAAA,eAAAC,MACAC,QAAA+B,EAAAL,eACA6B,KAAAxB,EAAAyB,SACAzB,EAAAjC,QAAA0C,EAAAT,EAAAjC,SAAAiC,EAAAZ,OACAY,EAAAjC,QAAA,GAAAS,MAAAD,OAAAF,EAAA,EAAAC,EAAA,EAGA0B,EAAAf,cACAe,EAAAjC,QAAA2D,GAAA,QAAA,SAAAC,GACAA,EAAAC,SAAAD,EAAAE,gBACAF,EAAAG,iBACAH,EAAAI,kBACA3B,EAAA4B,OAAA,WACAC,EAAAjF,EAAA,UAAA,QAOA0D,EAAA3D,IAAAC,GACAgD,EAAAkC,cACAvB,EAAA9C,KAAAmC,EAAAlC,cACA6C,EAAAvC,SAAAC,EAAAC,IAIAd,EAAAwC,EAAAjC,QAAAiC,EAAAtB,QAAAyD,KAAA,WACAnC,EAAAoC,eAAA7C,SAAA,IACA,SAAA8C,GACArC,EAAAoC,eAAAE,OAAAD,KAOA,QAAAJ,GAAAjF,EAAAuF,EAAAC,GAGA,GAAAxC,GAAAhD,EAAAuE,QACAjD,EAAAoC,EAAAjE,UAAA,CAGA,KAAAuD,EAAAjC,QACA,MAAAsC,GAAAQ,MAAA,EAIA,IAAA,kBAAAb,GAAAJ,cAAA,CACA,GAAA6C,GAAAzC,EAAAJ,cAAA5C,EAAAuF,EAAAC,EACA,IAAAC,KAAA,GAAAA,IAAAvG,EACA,MAAAmE,GAAAiC,OAAAG,GAAA,mBAsBA,MAjBAD,GACAxC,EAAA0C,eAAAJ,OAAAC,GAGAvC,EAAA0C,eAAAnD,QAAAgD,GAIA7B,EAAAxD,OAAAF,GACA0D,EAAAnE,UACAoE,EAAAzC,OAGAyC,EAAAvC,SAAAC,EAAAC,GAIAhB,EAAAa,MAAA6B,EAAAjC,SAAAoE,KAAA,WAGAnC,EAAAZ,QACAY,EAAAZ,MAAAuD,WACA3C,EAAAZ,MAAA,MAIAY,EAAAjC,QAAA,KAGAR,EAAA,GAAAqF,oBAAA,UAAA5C,EAAA6C,gBACA7C,EAAAhB,aACAzB,EAAA,GAAAqF,oBAAA,UAAA5C,EAAAhB,YACAgB,EAAAhB,WAAA,QAvIA,GAAAX,GAAA,IACAU,EAAAD,KAAAC,SACAc,EAAAf,KAAAe,QAGAnC,EAAAH,EAAAI,KAAA,QAAAC,GAAA,GA0IAkF,GAKAC,KAAA,SAAApG,EAAAqG,GASA,GANA,gBAAArG,KACAqG,EAAArG,MACAA,EAAA,IAIAA,GAAA,mBAAAkD,GAAAlD,GACAqG,EAAA/G,EAAA8D,UAAAF,EAAAlD,GAAAqG,WAEA,IAAArG,EACA,KAAA,IAAAsG,OAAA,iDACAtG,EAAA,sBASA,IALAqG,EAAA/G,EAAA8D,UAAAhB,EAAAiE,OACAA,EAAAzD,QAAAyD,EAAAzD,YACAyD,EAAAvD,SAAAuD,EAAAvD,UAAA/B,GAGAsF,EAAA9D,WAAA8D,EAAA7D,YACA,KAAA,IAAA8D,OAAA,sDAGA,KAAAD,EAAAvD,SAAAjD,OACA,KAAA,IAAAyG,OAAA,mDAIA,IAAAjD,IACAoC,eAAA/B,EAAA6C,QACAR,eAAArC,EAAA6C,QACAxE,OAAAsE,EAAAvD,SACAE,aAAAqD,EAAArD,aACA7B,aAAAkF,EAAAlF,aACAoE,YAAAc,EAAAtD,QACAT,aAAA+D,EAAA/D,aACAW,cAAAoD,EAAApD,eAIA5C,GACAuE,QAAAvB,EACArD,KAAAA,EACAwG,OAAAnD,EAAAoC,eAAAgB,QACAb,OAAAvC,EAAA0C,eAAAU,QACAC,MAAA,SAAAd,GACA,MAAAN,GAAAjF,EAAAuF,IAEAe,QAAA,SAAAjB,GACA,MAAAJ,GAAAjF,EAAAqF,GAAA,IA8EA,OAzEAW,GAAAhE,aACAgB,EAAAhB,WAAA,SAAA2C,GACA,GAAA4B,GAAA5B,EAAA6B,SAAA7B,EAAA8B,KACA,MAAAF,GAAA7C,EAAA7D,OAAAF,IACAyD,EAAA4B,OAAA,WACAC,EAAAjF,EAAA,UAAA,MAIAO,EAAA,GAAAmG,iBAAA,UAAA1D,EAAAhB,aAIAgB,EAAA6C,eAAA,SAAAlB,GACA,GAAA4B,GAAA5B,EAAA6B,SAAA7B,EAAA8B,KACA,MAAAF,GACAnD,EAAAuD,WAAA,iBAAA3G,IAGAO,EAAA,GAAAmG,iBAAA,UAAA1D,EAAA6C,gBAGAxC,EAAAuD,KACAhD,EAAAoC,EAAA9D,SAAA8D,EAAA7D,cACA0E,OAAA/C,EAAAkC,EAAAzD,WACA4C,KAAA,SAAApB,GAWA,GARAf,EAAAyB,QAAAV,EAAA+C,QAGA9D,EAAAZ,OAAA4D,EAAA5D,OAAAgB,GAAA2D,OACA/D,EAAAZ,MAAA4E,OAAAhH,EAAAqG,MACArD,EAAAZ,MAAA6E,SAAAjH,EAAAsG,QAGAN,EAAA3D,WAAA,CAGA,GAAAG,KAGAA,GAAA0E,OAAAlE,EAAAZ,MACAI,EAAA2E,eAAAnH,EAGAgG,EAAAxD,QAAA,gBAAAwD,GAAAxD,QACAvD,EAAAiE,QAAA8C,EAAAxD,OAAA,SAAA4E,EAAAb,GACA/D,EAAA+D,GAAAa,IAKAnI,EAAAiE,QAAA8C,EAAAzD,QAAA,SAAA6E,EAAAb,GACA/D,EAAA+D,GAAAxC,EAAA+C,UAIA9D,EAAAX,WAAAmB,EAAAwC,EAAA3D,WAAAG,GACAwD,EAAA1D,eACAU,EAAAZ,MAAA4D,EAAA1D,cAAAU,EAAAX,YAKAiC,EAAAtE,KA3CAqD,SA6CA,SAAAgC,GACArC,EAAAoC,eAAAE,OAAAD,GACArC,EAAA0C,eAAAJ,OAAAD,KAIArF,GAMAqH,SAAA,WACA,GAAAhI,GAAAqE,EAAApE,KACAL,GAAAiE,QAAA7D,EAAA,SAAAW,GACAiF,EAAAjF,EAAA,UAAA,MAOAN,OAAA,SAAAC,GACA,MAAA+D,GAAAhE,OAAAC,ICKI,OAAOmG,QAIR9G,OAAQA,OAAOC","file":"meanie-angular-modal.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Get number of modals that are open\n     */\n    numOpen: function() {\n      return stack.length;\n    },\n\n    /**\n     * Check if a specific modal is open\n     */\n    isOpen: function(name) {\n\n      //Can't distinguish unnamed modals\n      if (!name) {\n        return false;\n      }\n\n      //Check if open\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].name === name) {\n          return true;\n        }\n      }\n\n      //Not open\n      return false;\n    },\n\n    /**\n     * Check if a specific modal is last\n     */\n    isLast: function(name) {\n\n      //Can't distinguish unnamed modals or work with an empty stack\n      if (!name || stack.length === 0) {\n        return false;\n      }\n\n      //Get last modal and compare name\n      var last = stack[stack.length - 1];\n      return (last.name === name);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    },\n\n    /**\n     * Set the proper z-index\n     */\n    setIndex: function(baseIndex, numModals) {\n      if (overlayElement) {\n        var zIndex = baseIndex + 2 * (numModals - 1);\n        overlayElement[0].style.zIndex = zIndex;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay',\n    onBeforeClose: null\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var baseIndex = 10000;\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n      var numModals = $modalStack.numOpen() + 1;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n      modal.element[0].style.zIndex = baseIndex + (2 * numModals) - 1;\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n      var numModals = $modalStack.numOpen() - 1;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n        var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n        if (outcome !== true && outcome !== undefined) {\n          return $q.reject(outcome || 'Close prevented');\n        }\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Remove from stack\n      $modalStack.remove(modalInstance);\n      if ($modalStack.isEmpty()) {\n        $modalOverlay.hide();\n      }\n      else {\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listeners\n        $document[0].removeEventListener('keydown', modal.broadcastEnter);\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            name + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose\n        };\n\n        //Create modal instance interface\n        var modalInstance = {\n          $$modal: modal,\n          name: name,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27 && $modalStack.isLast(name)) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Enter broadcast\n        modal.broadcastEnter = function(event) {\n          var key = event.keyCode || event.which;\n          if (key === 13) {\n            $rootScope.$broadcast('$modalEnterKey', modalInstance);\n          }\n        };\n        $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve)))\n          .then(function(resolves) {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/dismiss handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$dismiss = modalInstance.dismiss;\n\n            //Controller given?\n            if (options.controller) {\n\n              //Initialize controller vars\n              var locals = {};\n\n              //Provide scope and modal instance\n              locals.$scope = modal.scope;\n              locals.$modalInstance = modalInstance;\n\n              //Provide other passed locals\n              if (options.locals && typeof options.locals === 'object') {\n                angular.forEach(options.locals, function(value, key) {\n                  locals[key] = value;\n                });\n              }\n\n              //Provide resolved values\n              angular.forEach(options.resolve, function(value, key) {\n                locals[key] = resolves.shift();\n              });\n\n              //Create controller instance\n              modal.controller = $controller(options.controller, locals);\n              if (options.controllerAs) {\n                modal.scope[options.controllerAs] = modal.controller;\n              }\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          })\n          .catch(function(reason) {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      },\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen: function(name) {\n        return $modalStack.isOpen(name);\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n","/**\n * meanie-angular-modal - v1.6.0 - 23-5-2016\n * https://github.com/meanie/angular-modal\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Modal.Service', [])\n\n/**\n * Modal stack service\n */\n.factory('$modalStack', function $modalStack() {\n\n  //Stack of modals\n  var stack = [];\n\n  //Modal stack interface\n  return {\n\n    /**\n     * Get modal instances stack\n     */\n    get: function() {\n      return stack;\n    },\n\n    /**\n     * Check if there are open instances\n     */\n    isEmpty: function() {\n      return (stack.length === 0);\n    },\n\n    /**\n     * Get number of modals that are open\n     */\n    numOpen: function() {\n      return stack.length;\n    },\n\n    /**\n     * Check if a specific modal is open\n     */\n    isOpen: function(name) {\n\n      //Can't distinguish unnamed modals\n      if (!name) {\n        return false;\n      }\n\n      //Check if open\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].name === name) {\n          return true;\n        }\n      }\n\n      //Not open\n      return false;\n    },\n\n    /**\n     * Check if a specific modal is last\n     */\n    isLast: function(name) {\n\n      //Can't distinguish unnamed modals or work with an empty stack\n      if (!name || stack.length === 0) {\n        return false;\n      }\n\n      //Get last modal and compare name\n      var last = stack[stack.length - 1];\n      return (last.name === name);\n    },\n\n    /**\n     * Add modal instance to stack\n     */\n    add: function(modalInstance) {\n      stack.push(modalInstance);\n    },\n\n    /**\n     * Remove modal instance from stack\n     */\n    remove: function(modalInstance) {\n      var index = stack.indexOf(modalInstance);\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  };\n})\n\n/**\n * Modal overlay service\n */\n.factory('$modalOverlay', ['$animate', '$document', '$appendAnimated', function $modalOverlay($animate, $document, $appendAnimated) {\n\n  //Global overlay element\n  var overlayElement;\n  var bodyElement = $document.find('body').eq(0);\n\n  /**\n   * Modal overlay service\n   */\n  return {\n\n    /**\n     * Show overlay element\n     */\n    show: function(overlayClass) {\n\n      //Already visible?\n      if (overlayElement) {\n        return;\n      }\n\n      //Create element\n      overlayElement = angular.element('<div></div>').attr({\n        class: overlayClass\n      });\n\n      //Animate in\n      return $appendAnimated(overlayElement, bodyElement);\n    },\n\n    /**\n     * Hide overlay element\n     */\n    hide: function() {\n      if (overlayElement) {\n        $animate.leave(overlayElement);\n        overlayElement = null;\n      }\n    },\n\n    /**\n     * Set the proper z-index\n     */\n    setIndex: function(baseIndex, numModals) {\n      if (overlayElement) {\n        var zIndex = baseIndex + 2 * (numModals - 1);\n        overlayElement[0].style.zIndex = zIndex;\n      }\n    }\n  };\n}])\n\n/**\n * Append animated helper\n */\n.factory('$appendAnimated', ['$animate', function $appendAnimated($animate) {\n  return function(child, parent) {\n    var children = parent.children();\n    if (children.length > 0) {\n      return $animate.enter(child, parent, children[children.length - 1]);\n    }\n    return $animate.enter(child, parent);\n  };\n}])\n\n/**\n * Modal service\n */\n.provider('$modal', function $modalProvider() {\n\n  /**\n   * Defaults\n   */\n  this.defaults = {\n    closeOnEsc: true,\n    closeOnClick: true,\n    template: null,\n    templateUrl: null,\n    scope: null,\n    controller: null,\n    controllerAs: null,\n    resolve: {},\n    locals: null,\n    appendTo: null,\n    overlay: true,\n    wrapperClass: 'modal-wrapper',\n    overlayClass: 'modal-overlay',\n    onBeforeClose: null\n  };\n\n  /**\n   * Store of predefined modal configs\n   */\n  this.configs = {};\n\n  /**\n   * Set defaults\n   */\n  this.setDefaults = function(defaults) {\n    this.defaults = angular.extend(this.defaults, defaults || {});\n    return this;\n  };\n\n  /**\n   * Predefine a modal config\n   */\n  this.modal = function(name, config) {\n\n    //Object hash given?\n    if (name && typeof name === 'object') {\n      angular.forEach(name, function(config, name) {\n        this.modal(name, config);\n      }, this);\n      return;\n    }\n\n    //Set config and return self\n    this.configs[name] = angular.extend({}, this.defaults, config || {});\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$rootScope', '$q', '$templateRequest', '$injector', '$controller', '$compile', '$document', '$animate', '$modalStack', '$modalOverlay', '$appendAnimated', function(\n    $rootScope, $q, $templateRequest, $injector, $controller,\n    $compile, $document, $animate, $modalStack, $modalOverlay,\n    $appendAnimated\n  ) {\n\n    //Get defaults and configs\n    var baseIndex = 10000;\n    var defaults = this.defaults;\n    var configs = this.configs;\n\n    //Get body element\n    var bodyElement = $document.find('body').eq(0);\n\n    /**\n     * Helper to get template promise\n     */\n    function getTemplatePromise(template, templateUrl) {\n      if (template) {\n        return $q.when(template);\n      }\n      return $templateRequest(templateUrl, true);\n    }\n\n    /**\n     * Helper to get resolve promises\n     */\n    function getResolvePromises(resolves) {\n      var promises = [];\n      angular.forEach(resolves, function(item) {\n        if (angular.isFunction(item) || angular.isArray(item)) {\n          promises.push($q.when($injector.invoke(item)));\n        }\n        else if (angular.isString(item)) {\n          promises.push($q.when($injector.get(item)));\n        }\n        else {\n          promises.push($q.when(item));\n        }\n      });\n      return promises;\n    }\n\n    /**\n     * Helper to open a modal\n     */\n    function openModal(modalInstance) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n      var numModals = $modalStack.numOpen() + 1;\n\n      //Create then compile modal element\n      modal.element = angular.element('<div></div>').attr({\n        class: modal.wrapperClass\n      }).html(modal.content);\n      modal.element = $compile(modal.element)(modal.scope);\n      modal.element[0].style.zIndex = baseIndex + (2 * numModals) - 1;\n\n      //Close on click?\n      if (modal.closeOnClick) {\n        modal.element.on('click', function(event) {\n          if (event.target === event.currentTarget) {\n            event.preventDefault();\n            event.stopPropagation();\n            $rootScope.$apply(function() {\n              closeModal(modalInstance, 'cancel', true);\n            });\n          }\n        });\n      }\n\n      //Add to stack and show overlay\n      $modalStack.add(modalInstance);\n      if (modal.showOverlay) {\n        $modalOverlay.show(modal.overlayClass);\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Append animated and resolve opened deferred\n      return $appendAnimated(modal.element, modal.parent).then(function() {\n        modal.openedDeferred.resolve(true);\n      }, function(reason) {\n        modal.openedDeferred.reject(reason);\n      });\n    }\n\n    /**\n     * Helper to close a modal\n     */\n    function closeModal(modalInstance, result, wasDismissed) {\n\n      //Access modal data object\n      var modal = modalInstance.$$modal;\n      var numModals = $modalStack.numOpen() - 1;\n\n      //No element present?\n      if (!modal.element) {\n        return $q.when(true);\n      }\n\n      //Call on before close handler if given\n      if (typeof modal.onBeforeClose === 'function') {\n        var outcome = modal.onBeforeClose(modalInstance, result, wasDismissed);\n        if (outcome !== true && outcome !== undefined) {\n          return $q.reject(outcome || 'Close prevented');\n        }\n      }\n\n      //Did we get a result\n      if (wasDismissed) {\n        modal.resultDeferred.reject(result);\n      }\n      else {\n        modal.resultDeferred.resolve(result);\n      }\n\n      //Remove from stack\n      $modalStack.remove(modalInstance);\n      if ($modalStack.isEmpty()) {\n        $modalOverlay.hide();\n      }\n      else {\n        $modalOverlay.setIndex(baseIndex, numModals);\n      }\n\n      //Animate out\n      return $animate.leave(modal.element).then(function() {\n\n        //Clean up scope\n        if (modal.scope) {\n          modal.scope.$destroy();\n          modal.scope = null;\n        }\n\n        //Remove element reference\n        modal.element = null;\n\n        //Remove event listeners\n        $document[0].removeEventListener('keydown', modal.broadcastEnter);\n        if (modal.closeOnEsc) {\n          $document[0].removeEventListener('keydown', modal.closeOnEsc);\n          modal.closeOnEsc = null;\n        }\n      });\n    }\n\n    /**\n     * Class definition\n     */\n    var Modal = {\n\n      /**\n       * Open a new modal\n       */\n      open: function(name, options) {\n\n        //No name given?\n        if (typeof name !== 'string') {\n          options = name || {};\n          name = '';\n        }\n\n        //Name given? Merge with predefined configs\n        if (name && typeof configs[name] !== 'undefined') {\n          options = angular.extend({}, configs[name], options || {});\n        }\n        else if (name) {\n          throw new Error('String given as options, but config with name ' +\n            name + ' was not predefined');\n        }\n\n        //Validate options\n        options = angular.extend({}, defaults, options || {});\n        options.resolve = options.resolve || {};\n        options.appendTo = options.appendTo || bodyElement;\n\n        //Must have either template or template url specified\n        if (!options.template && !options.templateUrl) {\n          throw new Error('One of template or templateUrl options is required.');\n        }\n\n        if (!options.appendTo.length) {\n          throw new Error('Element to append modal to not found in the DOM.');\n        }\n\n        //Prepare modal data object\n        var modal = {\n          openedDeferred: $q.defer(),\n          resultDeferred: $q.defer(),\n          parent: options.appendTo,\n          wrapperClass: options.wrapperClass,\n          overlayClass: options.overlayClass,\n          showOverlay: options.overlay,\n          closeOnClick: options.closeOnClick,\n          onBeforeClose: options.onBeforeClose\n        };\n\n        //Create modal instance interface\n        var modalInstance = {\n          $$modal: modal,\n          name: name,\n          opened: modal.openedDeferred.promise,\n          result: modal.resultDeferred.promise,\n          close: function(result) {\n            return closeModal(modalInstance, result);\n          },\n          dismiss: function(reason) {\n            return closeModal(modalInstance, reason, true);\n          }\n        };\n\n        //Close on escape?\n        if (options.closeOnEsc) {\n          modal.closeOnEsc = function(event) {\n            var key = event.keyCode || event.which;\n            if (key === 27 && $modalStack.isLast(name)) {\n              $rootScope.$apply(function() {\n                closeModal(modalInstance, 'cancel', true);\n              });\n            }\n          };\n          $document[0].addEventListener('keydown', modal.closeOnEsc);\n        }\n\n        //Enter broadcast\n        modal.broadcastEnter = function(event) {\n          var key = event.keyCode || event.which;\n          if (key === 13) {\n            $rootScope.$broadcast('$modalEnterKey', modalInstance);\n          }\n        };\n        $document[0].addEventListener('keydown', modal.broadcastEnter);\n\n        //Wait for template and resolves to resolve\n        $q.all([\n          getTemplatePromise(options.template, options.templateUrl)\n        ].concat(getResolvePromises(options.resolve)))\n          .then(function(resolves) {\n\n            //Get template content\n            modal.content = resolves.shift();\n\n            //Determine modal scope and link close/dismiss handlers\n            modal.scope = (options.scope || $rootScope).$new();\n            modal.scope.$close = modalInstance.close;\n            modal.scope.$dismiss = modalInstance.dismiss;\n\n            //Controller given?\n            if (options.controller) {\n\n              //Initialize controller vars\n              var locals = {};\n\n              //Provide scope and modal instance\n              locals.$scope = modal.scope;\n              locals.$modalInstance = modalInstance;\n\n              //Provide other passed locals\n              if (options.locals && typeof options.locals === 'object') {\n                angular.forEach(options.locals, function(value, key) {\n                  locals[key] = value;\n                });\n              }\n\n              //Provide resolved values\n              angular.forEach(options.resolve, function(value, key) {\n                locals[key] = resolves.shift();\n              });\n\n              //Create controller instance\n              modal.controller = $controller(options.controller, locals);\n              if (options.controllerAs) {\n                modal.scope[options.controllerAs] = modal.controller;\n              }\n            }\n\n            //Open modal now\n            openModal(modalInstance);\n          })\n          .catch(function(reason) {\n            modal.openedDeferred.reject(reason);\n            modal.resultDeferred.reject(reason);\n          });\n\n        //Return modal instance\n        return modalInstance;\n      },\n\n      /**\n       * Close all modals\n       */\n      closeAll: function() {\n        var stack = $modalStack.get();\n        angular.forEach(stack, function(modalInstance) {\n          closeModal(modalInstance, 'cancel', true);\n        });\n      },\n\n      /**\n       * Check if a specific modal is open\n       */\n      isOpen: function(name) {\n        return $modalStack.isOpen(name);\n      }\n    };\n\n    //Return the service\n    return Modal;\n  }];\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}